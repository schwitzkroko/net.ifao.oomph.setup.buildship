apply plugin: eclipsebuild.UpdateSitePlugin
apply plugin: 'org.hidetake.ssh'

buildscript {
    repositories { jcenter() }
    dependencies {
        classpath 'org.hidetake:gradle-ssh-plugin:1.1.2'
    }
}

updateSite {
   extraResources = files('p2.index')
//    extraResources = files('epl-v10.html', 'notice.html', 'p2.index')
//    signing { File unsignedFolder, File signedFolder ->
//        if (gradle.taskGraph.hasTask(uploadUpdateSite)) {
//            signByEclipseService(signedFolder, unsignedFolder)
//        } else {
//            signLocally(unsignedFolder, signedFolder)
//        }
//    }
   mutateArtifactsXml { Node artifactsXml ->
      addExtraPropertiesToArtifactsXml(artifactsXml)
   }
}

remotes {
    eclipseDotOrg {
        host = ECLIPSE_ORG_FTP_HOST
        user =  ECLIPSE_ORG_FTP_USER
        password = ECLIPSE_ORG_FTP_PASSWORD
        knownHosts = project.rootProject.file('gradle/ssh/known_hosts')
    }
}

dependencies {
    localPlugin project(':net.ifao.plugin')
    localFeature project(':net.ifao.feature')
}

task uploadUpdateSite(dependsOn : createP2Repository) {
    description = "Uploads the generated update site to the eclipse.org server."

    onlyIf { !['36', '37'].contains(eclipsebuild.Config.on(project).targetPlatform.eclipseVersion) }

    doLast {
        // folder structure
        // releases                    (main folder - composite update site if release repository)
        //  |--2.x                     (version folder - always a composite update site)
        //     |--2.0.0.v20150413-1512 (repository folder - simple update site)

        // define the folder structure
        def releaseTypeFolder = "${ECLIPSE_ORG_FTP_UPDATE_SITES_PATH}/e${eclipsebuild.Config.on(project).targetPlatform.eclipseVersion}/${releaseTypeFolder(project)}"
        def versionStreamFolder = "${releaseTypeFolder}/${releaseStream()}"
        def repositoryFolder = "${versionStreamFolder}/${project.version}"

        // create composite update site for the root of the release repository and for the versions folder
        def config = eclipsebuild.BuildshipConfig.on(project)
        def compositeFolders = config.isRelease() ? [releaseTypeFolder, versionStreamFolder] : [versionStreamFolder]

        // upload the update site and update the composite descriptors
        def directoriesInCompositeUpdateSite = eclipsebuild.BuildshipConfig.on(project).isSnapshot() ? 'ls -td -- */ | head -1' : 'ls -td -- */'
        ssh.run {
            session(remotes.eclipseDotOrg) {
                // create the leaf directory if not exist
                execute "mkdir -p $repositoryFolder"

                // copy the update site from the build directory to the remote location
                put from: files { file("$buildDir/repository").listFiles() }, into: repositoryFolder

                // recreate the compositeArtifacts.jar and the compositeContent.jar files
                compositeFolders.each { execute("""cd ${it}
                      ${file('updateCompositeUpdateSite.sh').text.replace('LIST_COMMAND', directoriesInCompositeUpdateSite)}""") }
            }
        }
    }
}

// Quick fix for https://github.com/eclipse/buildship/issues/519
//
// This is a quick-and-dirty solution to rewrite the the tooling-commons manifest to have the same version range for Guava
// as it is defined in the Buildship plugins. The solution doesn't match for the whole depenency String as the OSGi
// descriptors are word-wrapped, meaning that every dependency declarations can have newlines after each character.
// Besides, this workaround needs to be validated every time the tooling-commons descriptors change (which we expect
// that won't happen).
tasks.copyBundles.doLast {
    String newVersionRange = eclipsebuild.Config.on(project).targetPlatform.eclipseVersion >= '47' ? '[21.0.0,22.0.0)' : '[15.0.0,16.0.0)'
    new File(project.buildDir, "${eclipsebuild.UpdateSitePlugin.PRE_NORMALIZED_BUNDLES_DIR_NAME}/plugins").listFiles().each { jar ->
        if (jar.name.contains("com.gradleware.tooling")) {
            replaceGuavaDependencyRangeInManifest(jar, newVersionRange)
        }
    }
}

private void replaceGuavaDependencyRangeInManifest(File jar, String newVersionRange) {
    File manifest = project.zipTree(jar).files.find { it.name == 'MANIFEST.MF'}
    manifest.text = manifest.text.replace('[15.0.0,22.0.0)', newVersionRange)
    project.ant.zip(update: true, filesonly: true, destfile: jar) { fileset(dir: manifest.parentFile.parentFile) }
}

// utility methods
def releaseTypeFolder(Project project) {
    def config = eclipsebuild.BuildshipConfig.on(project)
    if(config.isRelease()) {
        "releases"
    } else if(config.isMilestone()){
        "milestones"
    } else if(config.isSnapshot()) {
        "snapshots"
    } else {
        throw new IllegalStateException("BuildshipConfig must either be a release, milestone, or snapshot.")
    }
}

def releaseStream() {
    // crop the major segment from the version number
    def matcher = version =~ /(\d+)\.\d+\.\d+\..*/
    "${matcher[0][1]}.x"
}

private void signByEclipseService(signedFolder, unsignedFolder) {
  ssh.run {
    session(remotes.eclipseDotOrg) {
      // the remote folder where the jars are signed
      def remoteFolder = "${ECLIPSE_ORG_TEMP_PATH}/${signedFolder.name}"

      // clean up the folder used for signing if the previous build failed
      execute """rm -rf $remoteFolder
                    mkdir -p $remoteFolder"""

      // transfer the unsigned files to the remote host
      put from: file(unsignedFolder).listFiles() as List, into: remoteFolder

      // perform the signing
      execute """ cd $remoteFolder
                    # iterate all jars in the subfolders
                    for jar in \$(find `pwd` -name '*.jar');
                    do
                        # save the signed jar into a temporary file copy and write it's content to the unsigned jar
                        curl -o signed.jar -F filedata=@\$jar http://build.eclipse.org:31338/sign
                        cp signed.jar \$jar
                        rm signed.jar
                    done
                    """

      // retrieve the signed content from the remote host into the build/signed-bundles folder
      get from: remoteFolder, into: signedFolder.parentFile

      // clean up the remote folder
      execute "rm -rf $remoteFolder"
    }
  }
}

private void signLocally(File unsignedFolder, File signedFolder) {
  def unsignedPluginsDir = new File(unsignedFolder, "plugins")
  def unsignedFeaturesDir = new File(unsignedFolder, "features")
  def signedPluginsDir = new File(signedFolder, "plugins")
  def signedFeaturesDir = new File(signedFolder, "features")

  signedPluginsDir.mkdirs()
  signedFeaturesDir.mkdirs()

  File targetDir = signedPluginsDir
  def signBundle = {
    project.logger.info("Sign '${it.absolutePath}'")
    project.ant.signjar(
        verbose: 'true',
        destDir: targetDir,
        alias: 'EclipsePlugins',
        jar: it,
        keystore: project.findProject(':').file('gradle/config/signing/DevKeystore.ks'),
        storepass: 'tooling',
        keypass: 'tooling',
        sigalg: 'SHA1withDSA',
        digestalg: 'SHA1',
        preservelastmodified: 'true')
  }

  unsignedPluginsDir.listFiles().each signBundle
  targetDir = signedFeaturesDir
  unsignedFeaturesDir.listFiles().each signBundle
}

private void addExtraPropertiesToArtifactsXml(Node artifactsXml) {
    // modify the artifacts.xml file only when it is deployed to the eclipse.org servers
    if (ECLIPSE_ORG_MIRROR_PATH) {
        // https://wiki.eclipse.org/Equinox/p2/p2.mirrorsURL
        // add p2.mirrorsUrl to the properties section
        def mainPropertiesNode = artifactsXml.depthFirst().find { it.parent()?.name() == 'repository' && it.name() == 'properties' }
        new Node(mainPropertiesNode, 'property', ['name': 'p2.mirrorsURL', 'value': calculateP2MirrorsUrl(project)] )

        // add download.stats property to each installable unit
        // https://wiki.eclipse.org/Equinox_p2_download_stats#Enabling_stats_in_your_repository
        new Node(mainPropertiesNode, 'property', ['name': 'p2.statsURI', 'value': calculateStatsUrl(project)])
        mainPropertiesNode.@size = mainPropertiesNode.children().size()

        // add <property name="download.stats" value="feature-id"/> node to the features
        artifactsXml.depthFirst().findAll {
            it.parent()?.parent()?.name() == 'artifacts' &&
            it.parent()?.name() == 'artifact' &&
            it.parent()?.@classifier == 'org.eclipse.update.feature' &&
            it.name() == 'properties'
        }.each {
            new Node(it, 'property', ['name': 'download.stats', 'value': it.parent().@id ] )
            it.@size = it.children().size()
        }
    }
}

def calculateP2MirrorsUrl(Project project) {
    def repositoryPath = "${ECLIPSE_ORG_MIRROR_PATH}/e${eclipsebuild.Config.on(project).targetPlatform.eclipseVersion}/${releaseTypeFolder(project)}/${releaseStream()}/${project.version}"
    "http://www.eclipse.org/downloads/download.php?file=${repositoryPath}&format=xml"
}

def calculateStatsUrl(Project project) {
    "http://download.eclipse.org/stats/buildship/e${eclipsebuild.Config.on(project).targetPlatform.eclipseVersion}/${releaseTypeFolder(project)}/${baseVersion}"
}
