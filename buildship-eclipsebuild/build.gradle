task wrapper(type: Wrapper) {
   gradleVersion = '4.8.1'
}

buildscript  {
   repositories {
      mavenLocal()
      
      // for all internal and public gradle plug-ins use a NON-PCI-DSS complaint URL (group)
      maven {
         url "${repositoryManagerURL}/ifao-buildtool_gradle-maven2/"
      }
      maven {
         url "${repositoryManagerURL}/ifao-buildtool_gradle-public-maven2/"
      }
   }

   dependencies {
      classpath 'org.hibernate.build.gradle:gradle-maven-publish-auth:2.0.1' // for maven-publish-auth
   }
}

apply plugin: 'java-gradle-plugin'
apply plugin: 'groovy'
apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'maven' // for task install
apply plugin: 'maven-publish' // for task publish
apply plugin: 'maven-publish-auth' // for task publish reading ~/.m2/settings.xml


group = 'net.ifao.3rdparty.eclipse'
version = '1.0.0-SNAPSHOT'


repositories {
    // local .m2 folder in user directory
    mavenLocal()
    
    // for all internal and public gradle plug-ins use a NON-PCI-DSS complaint URL (group)
    maven {
        url 'https://nexus.secure.ifao.net:8443/repository/ifao-buildtool_gradle-public-maven2/'
    }
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

compileJava.options.encoding = "UTF-8"

dependencies {

   compile gradleApi()
   compile localGroovy()


   // compile fileTree(dir: 'libs', include: ['*.jar'])
   
   // lib/org.eclipse.osgi_3.10.1.v20140909-1633.jar ->
   // compile'org.eclipse.tycho:org.eclipse.osgi:3.10.101.v20150820-1432'
   
   // lib/org.eclipse.osgi.compatibility.state_1.0.1.v20140709-1414.jar ->
   compile 'org.eclipse.tycho:org.eclipse.osgi.compatibility.state:1.0.200.v20160504-1419'
   
   // lib/org.eclipse.jdt.junit.core_3.7.300.v20140409-1618.jar ->
   compile 'org.eclipse.jdt:org.eclipse.jdt.junit.core:3.8.0'

   // lib/org.eclipse.equinox.common_3.6.200.v20130402-1505.jar ->
   // compile group: 'org.eclipse.equinox', name: 'org.eclipse.equinox.common', version: '3.6.0.v20100503'
   
   // lib/org.eclipse.equinox.common_3.6.200.v20130402-1505.jar ->
   // compile 'org.eclipse.platform:org.eclipse.equinox.common:3.8.0'

   // lib/org.eclipse.core.runtime_3.9.100.v20131218-1515.jar ->
   // compile group: 'org.eclipse.core', name: 'org.eclipse.core.runtime', version: '3.7.0'

    
   compile 'nu.studer:java-ordered-properties:1.0.1'
   compile 'org.apache.maven:maven-ant-tasks:2.1.3'
   compile 'bcel:bcel:5.1'
}

gradlePlugin {
    plugins {
        UpdateSitePlugin {
            id = 'eclipsebuild.UpdateSitePlugin'
            implementationClass = 'eclipsebuild.UpdateSitePlugin'
        }
         TestBundlePlugin {
            id = 'eclipsebuild.TestBundlePlugin'
            implementationClass = 'eclipsebuild.TestBundlePlugin'
        }
        FeaturePlugin {
            id = 'eclipsebuild.FeaturePlugin'
            implementationClass = 'eclipsebuild.FeaturePlugin'
        }
        BundlePlugin {
            id = 'eclipsebuild.BundlePlugin'
            implementationClass = 'eclipsebuild.BundlePlugin'
        }
        BuildDefinitionPlugin {
            id = 'eclipsebuild.BuildDefinitionPlugin'
            implementationClass = 'eclipsebuild.BuildDefinitionPlugin'
        }

    }
}

task sourcesJar(type: Jar) {
   description = 'generate a jar file with the source code'
   
   classifier = 'sources'
   from sourceSets.main.allSource
}

publishing {
   publications {
      mavenJava(MavenPublication) {
         from components.java
         
         // resolves the artifact tasks
         artifact sourcesJar
      }
   }
   
   repositories {
      // Nexus upload URL's for Jenkins
      if (project.version.endsWith('SNAPSHOT')) {
         maven {
            name = 'nexus-secure-arctic-repositories'
            url 'https://nexus.secure.ifao.net:8443/repository/ifao-buildtool_gradle-snapshot-maven2/'
         }
      } else {
         maven {
            name = 'nexus-secure-arctic-repositories'
            url 'https://nexus.secure.ifao.net:8443/repository/ifao-buildtool_gradle-release-maven2/'
         }
      }
   }
}

eclipse {
   classpath {
      if (project.hasProperty('downloadJavadoc')) {
         downloadJavadoc = project.ext.downloadJavadoc
      } else {
         downloadJavadoc = true
      }

      if (project.hasProperty('downloadSources')) {
         downloadSources = project.ext.downloadSources
      } else {
         downloadSources = true
      }
   }
}

afterEvaluate {
   logger.quiet '------------------------------------------------'
   logger.quiet project.group + ":" + archivesBaseName + ":" + project.version
   logger.quiet '------------------------------------------------'
}
