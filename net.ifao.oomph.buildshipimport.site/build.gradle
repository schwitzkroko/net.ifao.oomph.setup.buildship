apply plugin: eclipsebuild.UpdateSitePlugin
apply plugin: 'org.hidetake.ssh'

buildscript {
    repositories { jcenter() }
    dependencies {
        classpath 'org.hidetake:gradle-ssh-plugin:1.1.2'
    }
}

dependencies {
    localPlugin project(':net.ifao.oomph.buildshipimport.plugin')
    localPlugin project(':net.ifao.oomph.buildshipimport.plugin.edit')
    localFeature project(':net.ifao.oomph.buildshipimport.feature')

    // include 3rd party dependencies in the update site
    // externalPlugin withEclipseBundle('com.gradleware.tooling.model')

    // official 3rd party dependencies from Orbit which are already signed and normalized with pack200
    // signedExternalPlugin withEclipseBundle('org.slf4j.api')
    // signedExternalPlugin withEclipseBundle('com.google.gson')
    // signedExternalPlugin withEclipseBundle('com.google.guava')
}


remotes {
   polarisHttp {
       host = POLARIS_HTTP_SFTP_HOST
       user =  POLARIS_HTTP_SFTP_USER
       password = POLARIS_HTTP_SFTP_PASSWORD
       // knownHosts = project.rootProject.file('gradle/ssh/known_hosts')
   }
}


updateSite {
   siteDescriptor = file('category.xml')
   extraResources = files('epl-v10.html', 'notice.html', 'p2.index')
   // signing { File unsignedFolder, File signedFolder ->
   //     if (gradle.taskGraph.hasTask(uploadUpdateSite)) {
   //         signByEclipseService(signedFolder, unsignedFolder)
   //     } else {
   //         signLocally(unsignedFolder, signedFolder)
   //    }
   // }
   mutateArtifactsXml { Node artifactsXml ->
       addExtraPropertiesToArtifactsXml(artifactsXml)
   }
}

private void signLocally(File unsignedFolder, File signedFolder) {
   def unsignedPluginsDir = new File(unsignedFolder, "plugins")
   def unsignedFeaturesDir = new File(unsignedFolder, "features")
   def signedPluginsDir = new File(signedFolder, "plugins")
   def signedFeaturesDir = new File(signedFolder, "features")
 
   signedPluginsDir.mkdirs()
   signedFeaturesDir.mkdirs()
 
   File targetDir = signedPluginsDir
   def signBundle = {
     project.logger.info("Sign '${it.absolutePath}'")
     project.ant.signjar(
         verbose: 'true',
         destDir: targetDir,
         alias: 'EclipsePlugins',
         jar: it,
         keystore: project.findProject(':').file('gradle/config/signing/DevKeystore.ks'),
         storepass: 'tooling',
         keypass: 'tooling',
         sigalg: 'SHA1withDSA',
         digestalg: 'SHA1',
         preservelastmodified: 'true')
   }
 
   unsignedPluginsDir.listFiles().each signBundle
   targetDir = signedFeaturesDir
   unsignedFeaturesDir.listFiles().each signBundle
}

private void addExtraPropertiesToArtifactsXml(Node artifactsXml) {
   // modify the artifacts.xml file only when it is deployed to the eclipse.org servers
   if (POLARIS_HTTP_MIRROR_PATH) {
       // https://wiki.eclipse.org/Equinox/p2/p2.mirrorsURL
       // add p2.mirrorsUrl to the properties section
       def mainPropertiesNode = artifactsXml.depthFirst().find { it.parent()?.name() == 'repository' && it.name() == 'properties' }
       new Node(mainPropertiesNode, 'property', ['name': 'p2.mirrorsURL', 'value': calculateP2MirrorsUrl(project)] )

       // add download.stats property to each installable unit
       // https://wiki.eclipse.org/Equinox_p2_download_stats#Enabling_stats_in_your_repository
       new Node(mainPropertiesNode, 'property', ['name': 'p2.statsURI', 'value': calculateStatsUrl(project)])
       mainPropertiesNode.@size = mainPropertiesNode.children().size()

       // add <property name="download.stats" value="feature-id"/> node to the features
       artifactsXml.depthFirst().findAll {
           it.parent()?.parent()?.name() == 'artifacts' &&
           it.parent()?.name() == 'artifact' &&
           it.parent()?.@classifier == 'org.eclipse.update.feature' &&
           it.name() == 'properties'
       }.each {
           new Node(it, 'property', ['name': 'download.stats', 'value': it.parent().@id ] )
           it.@size = it.children().size()
       }
   }
}


// Quick fix for https://github.com/eclipse/buildship/issues/519
//
// This is a quick-and-dirty solution to rewrite the the tooling-commons manifest to have the same version range for Guava
// as it is defined in the Buildship plugins. The solution doesn't match for the whole depenency String as the OSGi
// descriptors are word-wrapped, meaning that every dependency declarations can have newlines after each character.
// Besides, this workaround needs to be validated every time the tooling-commons descriptors change (which we expect
// that won't happen).
tasks.copyBundles.doLast {
    String newVersionRange = eclipsebuild.Config.on(project).targetPlatform.eclipseVersion >= '47' ? '[21.0.0,22.0.0)' : '[15.0.0,16.0.0)'
    new File(project.buildDir, "${eclipsebuild.UpdateSitePlugin.PRE_NORMALIZED_BUNDLES_DIR_NAME}/plugins").listFiles().each { jar ->
        if (jar.name.contains("com.gradleware.tooling")) {
            replaceGuavaDependencyRangeInManifest(jar, newVersionRange)
        }
    }
}

private void replaceGuavaDependencyRangeInManifest(File jar, String newVersionRange) {
    File manifest = project.zipTree(jar).files.find { it.name == 'MANIFEST.MF'}
    manifest.text = manifest.text.replace('[15.0.0,22.0.0)', newVersionRange)
    project.ant.zip(update: true, filesonly: true, destfile: jar) { fileset(dir: manifest.parentFile.parentFile) }
}


// upload and update
task uploadUpdateSite(dependsOn : createP2Repository) {
    description = "Uploads the generated update site to the server."

    onlyIf { 
       !['36', '37'].contains(eclipsebuild.Config.on(project).targetPlatform.eclipseVersion) 
       && remotes.polarisHttp
       }

    doLast {
        // folder structure
        // releases                    (main folder - composite update site if release repository)
        //  |--2.x                     (version folder - always a composite update site)
        //     |--2.0.0.v20150413-1512 (repository folder - simple update site)

        // define the folder structure
        def releaseTypeFolder = "${POLARIS_HTTP_SFTP_UPDATE_SITES_PATH}/e${eclipsebuild.Config.on(project).targetPlatform.eclipseVersion}/${releaseTypeFolder(project)}"
        def versionStreamFolder = "${releaseTypeFolder}/${releaseStream()}"
        def repositoryFolder = "${versionStreamFolder}/${project.version}"

        println "repositoryFolder: $repositoryFolder"

        // create composite update site for the root of the release repository and for the versions folder
        def config = eclipsebuild.BuildshipConfig.on(project)
        def compositeFolders = config.isRelease() ? [releaseTypeFolder, versionStreamFolder] : [versionStreamFolder]

        // upload the update site and update the composite descriptors
        def directoriesInCompositeUpdateSite = eclipsebuild.BuildshipConfig.on(project).isSnapshot() ? 'ls -td -- */ | head -1' : 'ls -td -- */'

        ssh.run {
            session(remotes.polarisHttp) {
                // create the leaf directory if not exist
                execute "mkdir -p $repositoryFolder"

                // copy the update site from the build directory to the remote location
                put from: files { file("$buildDir/repository").listFiles() }, into: repositoryFolder

                // recreate the compositeArtifacts.jar and the compositeContent.jar files
                compositeFolders.each { execute("""cd ${it}
                     ${file('updateCompositeUpdateSite.sh').text.replace('LIST_COMMAND', directoriesInCompositeUpdateSite)}""") }
            }
        }
    }
}

remotes {
   no_polarisHttp {
       host = POLARIS_HTTP_SFTP_HOST
       user =  POLARIS_HTTP_SFTP_USER
       password = POLARIS_HTTP_SFTP_PASSWORD
       // knownHosts = project.rootProject.file('gradle/ssh/known_hosts')
   }
}


// utility methods
def releaseTypeFolder(Project project) {
    def config = eclipsebuild.BuildshipConfig.on(project)
    if(config.isRelease()) {
        "releases"
    } else if(config.isMilestone()){
        "milestones"
    } else if(config.isSnapshot()) {
        "snapshots"
    } else {
        throw new IllegalStateException("BuildshipConfig must either be a release, milestone, or snapshot.")
    }
}

def releaseStream() {
    // crop the major segment from the version number
    def matcher = version =~ /(\d+)\.\d+\.\d+\..*/
    "${matcher[0][1]}.x"
}

def calculateP2MirrorsUrl(Project project) {
    def repositoryPath = "${POLARIS_HTTP_MIRROR_PATH}/e${eclipsebuild.Config.on(project).targetPlatform.eclipseVersion}/${releaseTypeFolder(project)}/${releaseStream()}/${project.version}"
    "http://www.eclipse.org/downloads/download.php?file=${repositoryPath}&format=xml"
}

def calculateStatsUrl(Project project) {
    "http://download.eclipse.org/stats/buildship/e${eclipsebuild.Config.on(project).targetPlatform.eclipseVersion}/${releaseTypeFolder(project)}/${baseVersion}"
}
