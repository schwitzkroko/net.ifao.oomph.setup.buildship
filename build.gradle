buildscript {

   repositories {
      // mavenLocal()

      // for all internal and public gradle plug-ins use a NON-PCI-DSS complaint URL (group)
      maven {
         url "${repositoryManagerURL}/ifao-buildtool_gradle-maven2/"
      }
      maven {
         url "${repositoryManagerURL}/ifao-buildtool_gradle-public-maven2/"
      }
   }

   dependencies {
      classpath "net.ifao.3rdparty.eclipse:gradle_eclipsebuild:1.0.0-SNAPSHOT"
   }
}

task wrapper(type: Wrapper) {
   gradleVersion = '4.10.2'
}

apply plugin: eclipsebuild.BuildDefinitionPlugin
apply plugin: 'eclipse'


eclipseBuild {

  defaultEclipseVersion = '410'

  final def swtPluginId = "org.eclipse.swt.${ECLIPSE_WS}.${ECLIPSE_OS}.${ECLIPSE_ARCH}"

  def versionAgnosticDependencies = [
     'org.slf4j.api'                         : '1.7.2',
     'com.google.guava'                      : '21.0.0',
     'org.eclipse.swtbot.eclipse.finder'     : '2.2.1',
     'org.eclipse.swtbot.junit4_x'           : '2.2.1'
  ]

  targetPlatform {
    eclipseVersion = '410'
    targetDefinition = file('tooling-e410.target')

    def oomphVersion = '1.10.0'
    def buildshipVersion = '3.0.0'

    def oomphDependencies = [
       'org.eclipse.oomph.base'                     : oomphVersion,
       'org.eclipse.oomph.setup'                    : oomphVersion,
       'org.eclipse.oomph.setup.core'               : oomphVersion,
       'org.eclipse.oomph.resources'                : oomphVersion
     ]

    def oomphEditDependencies = [
       'org.eclipse.oomph.base.edit'                : oomphVersion,
       'org.eclipse.oomph.predicates.edit'          : oomphVersion,
       'org.eclipse.oomph.resources.edit'           : oomphVersion,
       'org.eclipse.oomph.setup.edit'               : oomphVersion
    ]

    def buildshipDependencies = [
       'org.eclipse.buildship.core'                : buildshipVersion,
       'org.eclipse.buildship.ui'                  : buildshipVersion
    ]

   def targetAdditionalDependencies = oomphDependencies + oomphEditDependencies + buildshipDependencies + versionAgnosticDependencies


    versionMapping = [
      "$swtPluginId"                          : '3.108.100', // TODO
      'org.eclipse.swt'                       : '3.108.100',
      'org.eclipse.emf.ecore'                 : '2.16.0',
      'org.eclipse.emf.edit'                  : '2.14.0',
      'com.ibm.icu'                           : '63.1.0',
      'org.eclipse.core.expressions'          : '3.6.200',
      'org.eclipse.core.filesystem'           : '1.7.200',
      'org.eclipse.core.net'                  : '1.3.400',
      'org.eclipse.core.resources'            : '3.13.200',
      'org.eclipse.core.runtime'              : '3.15.100',
      'org.eclipse.core.variables'            : '3.4.300',
      'org.eclipse.debug.core'                : '3.13.100',
      'org.eclipse.debug.ui'                  : '3.13.200',
      'org.eclipse.help'                      : '3.8.200',
      'org.eclipse.jdt.core'                  : '3.16.0',
      'org.eclipse.jdt.junit.core'            : '3.11.200',
      'org.eclipse.jdt.launching'             : '3.12.0',
      'org.eclipse.jdt.ui'                    : '3.16.0',
      'org.eclipse.jface.databinding'         : '1.8.400',
      'org.eclipse.jface.text'                : '3.15.0',
      'org.eclipse.ui'                        : '3.110.0',
      'org.eclipse.ui.console'                : '3.8.300',
      'org.eclipse.ui.editors'                : '3.11.300',
      'org.eclipse.ui.ide'                    : '3.14.200',
      'org.eclipse.ui.navigator'              : '3.7.300',
      'org.eclipse.ui.views'                  : '3.9.200',
      'org.eclipse.ui.workbench'              : '3.112.100',
      'org.eclipse.ui.workbench.texteditor'   : '3.11.200',
      'org.junit'                             : '4.12.0'
    ] + targetAdditionalDependencies
  }


  // legacy dependency management "pre-e49"

  def oomphVersionPreE49 = '1.9.0'
  def buildshipVersionPreE49 = '2.2.1'

  def oomphDependenciesPreE49 = [
     'org.eclipse.oomph.base'                     : oomphVersionPreE49,
     'org.eclipse.oomph.setup'                    : oomphVersionPreE49,
     'org.eclipse.oomph.setup.core'               : oomphVersionPreE49,
     'org.eclipse.oomph.resources'                : oomphVersionPreE49
   ]

  def oomphEditDependenciesPreE49 = [
     'org.eclipse.oomph.base.edit'                : oomphVersionPreE49,
     'org.eclipse.oomph.predicates.edit'          : oomphVersionPreE49,
     'org.eclipse.oomph.resources.edit'           : oomphVersionPreE49,
     'org.eclipse.oomph.setup.edit'               : oomphVersionPreE49
  ]

  def buildshipDependenciesPreE49 = [
     'org.eclipse.buildship.core'                : buildshipVersionPreE49,
     'org.eclipse.buildship.ui'                  : buildshipVersionPreE49
  ]

  // define version mapping for the 3rd-party dependencies that are not specific to a particular Eclipse version

  // on from e49 a buildship api has been made available upon the tooling api
  ext.toolingCommonsBundleVersion = getBundleVersion(toolingCommonsVersion)
  ext.toolingApiBundleVersion = getBundleVersion(toolingApiVersion)

  def gradleToolingDependencies = [
      'com.gradleware.tooling.utils'          : toolingCommonsBundleVersion,
      'com.gradleware.tooling.client'         : toolingCommonsBundleVersion,
      'com.gradleware.tooling.model'          : toolingCommonsBundleVersion,
      'org.gradle.toolingapi'                 : toolingApiBundleVersion,
  ]

  def targetAdditionalDependenciesPreE49 = oomphDependenciesPreE49 + oomphEditDependenciesPreE49 + buildshipDependenciesPreE49 + gradleToolingDependencies + versionAgnosticDependencies

  targetPlatform {
    eclipseVersion = '48'
    targetDefinition = file('tooling-e48.target')
    versionMapping = [
      "$swtPluginId"                          : '3.107.0',
      'org.eclipse.swt'                       : '3.107.0',
      'org.eclipse.emf.ecore'                 : '2.14.0',
      'org.eclipse.emf.edit'                  : '2.13.0',
      'com.ibm.icu'                           : '58.2.0',
      'org.eclipse.core.expressions'          : '3.6.100',
      'org.eclipse.core.filesystem'           : '1.7.100',
      'org.eclipse.core.net'                  : '1.3.200',
      'org.eclipse.core.resources'            : '3.13.0',
      'org.eclipse.core.runtime'              : '3.14.0',
      'org.eclipse.core.variables'            : '3.4.100',
      'org.eclipse.debug.core'                : '3.12.0',
      'org.eclipse.debug.ui'                  : '3.13.0',
      'org.eclipse.help'                      : '3.8.100',
      'org.eclipse.jdt.core'                  : '3.14.0',
      'org.eclipse.jdt.junit.core'            : '3.10.0',
      'org.eclipse.jdt.launching'             : '3.10.0',
      'org.eclipse.jdt.ui'                    : '3.14.0',
      'org.eclipse.jface.databinding'         : '1.8.200',
      'org.eclipse.jface.text'                : '3.13.0',
      'org.eclipse.ui'                        : '3.109.100',
      'org.eclipse.ui.console'                : '3.8.0',
      'org.eclipse.ui.editors'                : '3.11.100',
      'org.eclipse.ui.ide'                    : '3.14.0',
      'org.eclipse.ui.navigator'              : '3.7.100',
      'org.eclipse.ui.views'                  : '3.9.100',
      'org.eclipse.ui.workbench'              : '3.111.0',
      'org.eclipse.ui.workbench.texteditor'   : '3.11.0',
      'org.junit'                             : '4.12.0'
    ] + targetAdditionalDependenciesPreE49
  }

  targetPlatform {
    eclipseVersion = '47'
    targetDefinition = file('tooling-e47.target')
    versionMapping = [
      "$swtPluginId"                          : '3.106.1',
      'org.eclipse.swt'                       : '3.106.1',
      'org.eclipse.emf.ecore'                 : '2.14.0', // UNTESTED
      'org.eclipse.emf.edit'                  : '2.13.0', // UNTESTED
      'com.ibm.icu'                           : '58.2.0',
      'org.eclipse.core.expressions'          : '3.6.0',
      'org.eclipse.core.filesystem'           : '1.7.0',
      'org.eclipse.core.net'                  : '1.3.100',
      'org.eclipse.core.resources'            : '3.12.0',
      'org.eclipse.core.runtime'              : '3.13.0',
      'org.eclipse.core.variables'            : '3.4.0',
      'org.eclipse.debug.core'                : '3.11.0',
      'org.eclipse.debug.ui'                  : '3.12.50',
      'org.eclipse.help'                      : '3.8.1',
      'org.eclipse.jdt.core'                  : '3.11.0',
      'org.eclipse.jdt.junit.core'            : '3.9.50',
      'org.eclipse.jdt.launching'             : '3.9.50',
      'org.eclipse.jdt.ui'                    : '3.13.50',
      'org.eclipse.jface.databinding'         : '1.8.100',
      'org.eclipse.jface.text'                : '3.12.0',
      'org.eclipse.ui'                        : '3.109.0',
      'org.eclipse.ui.console'                : '3.7.1',
      'org.eclipse.ui.editors'                : '3.11.0',
      'org.eclipse.ui.ide'                    : '3.13.1',
      'org.eclipse.ui.navigator'              : '3.7.0',
      'org.eclipse.ui.views'                  : '3.9.0',
      'org.eclipse.ui.workbench'              : '3.10.100', // UNTESTED
      'org.eclipse.ui.workbench.texteditor'   : '3.10.100',
      'org.junit'                             : '4.12.0'
    ] + targetAdditionalDependenciesPreE49
  }
}


// read the current version from an external file and add a timestamp suffix if requested by the caller
ext.baseVersion = file('version.txt').text.trim()
ext.versionQualifier = getVersionQualifier()
version = baseVersion + '.' + versionQualifier


subprojects {
    version = rootProject.version

   apply plugin: 'eclipse'

    plugins.withType(JavaPlugin) {
      sourceCompatibility = 1.8
      targetCompatibility = 1.8
   }


    // configure the repositories where the external dependencies can be found
    repositories {

      maven {
         name = 'mavenized-target-platform'
         url "${eclipsebuild.Config.on(project).mavenizedTargetPlatformDir}"
      }

      // maven {
      //     name = 'gradle-snapshots'
      //     url gradleSnapshotsRepositoryUrl
      // }

      maven {
         name = 'gradle-releases'
         url gradleReleasesRepositoryUrl
      }

      // maven {
      //    name = 'gradle-remote'
      //     url gradleRemoteRepositoryUrl
      // }
    }
}


tasks.withType(eclipsebuild.DownloadEclipseSdkTask) {
   def os = org.gradle.internal.os.OperatingSystem.current()
   def arch = System.getProperty("os.arch").contains("64") ? "64" : "32"
   if (os.windows) {
       downloadUrl = "http://builds.gradle.org:8000/eclipse/sdk/eclipse-sdk-4.4.2-windows-${arch}.zip"
   } else if (os.macOsX) {
       downloadUrl = "http://builds.gradle.org:8000/eclipse/sdk/eclipse-sdk-4.4.2-macosx-${arch}.tar.gz"
   } else if (os.linux) {
       downloadUrl = "http://builds.gradle.org:8000/eclipse/sdk/eclipse-sdk-4.4.2-linux-${arch}.tar.gz"
   }
}

String getVersionQualifier() {
    def config = eclipsebuild.BuildshipConfig.on(project)

    // determine suffix for snapshot and milestone builds
    def suffix
    if (config.isRelease()) {
        suffix = ''
    } else if (config.isMilestone()) {
        suffix = '-m'
    } else if (config.isSnapshot()) {
        suffix = '-s'
    } else {
        throw new IllegalStateException("BuildshipConfig must either be a release, milestone, or snapshot.")
    }

    // use full timestamp on CI vs. date-only for local builds
    if (project.hasProperty('build.invoker') && project.property('build.invoker') == 'ci') {
        // note that for Eclipse plugin versions, the '-' and '.' character are invalid in front of the build id
        'v' + new Date().format('yyyyMMdd-kkmm', TimeZone.getTimeZone('GMT')) + suffix
    } else {
        'v' + new Date().format('yyyyMMdd', TimeZone.getTimeZone('GMT')) + suffix
    }
}

def getBundleVersion(String version) {
   def matcher = version =~ /(\d+)\.(\d+)(?:-.*|\.(\d+)(?:-.*)?)?/
   if (matcher.matches()) {
      def major = matcher.group(1)
      def minor = matcher.group(2)
      def service = matcher.group(3) ?: '0'
      return "$major.$minor.$service"
   } else {
      throw new IllegalArgumentException("Invalid bundle version: $version")
   }
}

eclipse {
   project {
      name = 'net.ifao.oomph.buildshipimport.ROOT'
   }
}
