package net.ifao.arctic.agents._PACKAGE_.framework.communication;

import net.ifao.arctic.xml.providerprofiles.Pro_Provider_Profile;

import net.ifao.arctic.agents.common.pnr.communication.*;
import net.ifao.arctic.xml.request.types.ReqEnumProviderType;
import net.ifao.arctic.io.log.*;
import net.ifao.arctic.framework.*;



/**
 * Class GdsAdapter_Provider_
 * This class implements the communication with _Provider_. It's
 * responsibility is calling the ErrorChecker, too.
 * <p>
 * Copyright &copy; 2002, i:FAO
 * @author _GENERATOR_
 */
public class GdsAdapter_Provider_
    extends TimeoutControlledGdsAdapterBase
{

// ------------------------------------------------------------------------
//   I M P L E M E N T A T I O N   ( F R A M E W O R K )
// ------------------------------------------------------------------------

    private _Provider_Communication _communication = null;

    /**
     * Constructor GdsAdapter_Provider_
     * constructs a GdsAdapter_Provider_
     * @author _GENERATOR_
     */
    public GdsAdapter_Provider_()
    {
        super(null, null);
    }

    /**
     * Constructor GdsAdapter_Provider_
     * constructs a GdsAdapter_Provider_
     * @param pLog The log
     * @param pCommunication the communication object.
     * @author _GENERATOR_
     */
    public GdsAdapter_Provider_(IArcticLog pLog,
                                _Provider_Communication pCommunication,
                                java.io.Serializable pConfiguration)
    {
        super(pLog, pConfiguration);
        _communication = pCommunication;
        if (_communication == null) {
           _errorChecker = new ErrorChecker_Provider_(_log);
        } else {
           _errorChecker = new ErrorChecker_Provider_(_communication.log);
        }
    }

    /**
     * Method initialize is used to initialize the subadapter. It is
     * overwritten from the specific GdsAdapter
     *
     * @param pParentAdapter the "main" adapter
     * @param pLog the sublog
     * @param pConfiguration provider profile 
     *
     * @author _GENERATOR_
     */
    @Override
    protected void initialize(ThreadedGdsAdapterBase pParentAdapter,
                              IArcticLog pLog, java.io.Serializable pConfiguration)
    {
        setConfiguration(pConfiguration);

        initNewLog(pLog);
        _errorChecker = new ErrorChecker_Provider_(pLog);

        _communication =
            ((GdsAdapter_Provider_) pParentAdapter)._communication;
    }
    /**
     * Method getTimeoutControlledGdsAdapter returns a new TimeoutControlledGdsAdapter
     * 
     * @return TimeoutControlledGdsAdapter
     * @author _GENERATOR_ 
     */
    @Override
    protected TimeoutControlledGdsAdapterBase getTimeoutControlledGdsAdapter()
    {
       GdsAdapter_Provider_ gdsAdapterTimeoutControlled = new GdsAdapter_Provider_(_log, _communication,
             _configuration);

       return gdsAdapterTimeoutControlled;
    }

// ------------------------------------------------------------------------
//   I M P L E M E N T A T I O N   ( A P P L I C A T I O N )
// ------------------------------------------------------------------------

    /**
     * Method getSpecificResponse sends a specific request using the
     * communication object. You can access the communication object with
     * this object variable <b>_communication</b>.
     *
     * <p> The following paragraph was generated by the DTDInfo-Generator<br>
     * Method getSpecificResponse() was called for
     * <ul>
     * </ul>
     * </p>
     *
     * @param pProtoRequest object containing the native request
     * @param pProviderType type of the provider
     * @author _GENERATOR_
     *
     * @return The native response-object
     * @throws AgentException
     */
    @Override
    protected Object getSpecificResponse(ProtoRequestBase pProtoRequest,
        ReqEnumProviderType pProviderType)
        throws AgentException
    {

        // get the Native RequestObject. This object, request, is ready
        // to be sent to _Provider_.
        Object request = pProtoRequest.getNativeRequest();

        Object response = null;

        // depending on the request the specific communication method is called:

        /**
         * @todo STANDARD GdsAdapter_Provider_.getSpecificResponse(): Send requestObject to GDS and return the native responseObject.
         *
         * This method is called by the r2a framework to cause GdsAdapter_Provider_
         * to exchange information with _Provider_. Place your code for sending the
         * request and receiving the response, here.
         * e.g. response = _communication.sendReceive(request);
         * 
         * This method should check executionInterruptedByControllingThread() to see, if the thread
         * has been "interrupted" by the Timeout controlling thread. If it is true, the current
         * (controlled) thread should stop execution as soon and as clean as possible
         */


        // return the native response-object
        return response;
    }

}
